#Jakub Zaroda - Diffie - Hellman 2 osoby
from __future__ import print_function
#Generacja parametrow dziedziny
#WE:
#b -dlugosc charakterystyki ciala p w bitach
#WY:
#p - charakterystyka ciała F
#n - rzad podgrupy cyklicznej
#g - generator podgrupy cyklicznej rzedu n
def genParameters(b):
    p=randint(2^(b-1), 2^b)

    while True:
        p=next_prime(p)
        if p>2^b:
            exit()
        n=(p-1)//2
        if is_prime(n):
            break

    F=GF(p)
    while True:
        while True:
            g=F.random_element()
            if g.multiplicative_order()==n:
                break
        if(g^n==1):
            break

    print("Charakterystyka ciała F: p =", p)
    print("Rzad podgrupy cyklicznej: n =", n)
    print("Generator podgrupy cyklicznej rzedu n: g =", g)

    return p, n, g

p, n, g = genParameters(256)

#Generacja kluczy - publicznego i prywatnego
#WE:
#p - charakterystyka ciała F
#n - rzad podgrupy cyklicznej
#g - generator podgrupy cyklicznej rzedu n
#WY:
#kpriv - klucz prywatny
#kpub - klucz publiczny
def genKeys(p, n, g):
    kpriv=randint(2, n-1)
    kpub=g^kpriv % p
    return kpriv, kpub

privA, pubA=genKeys(p, n, g)
privB, pubB=genKeys(p, n, g)

print("\nWygenerowane klucze:")
print("Klucz prywatny A: ", privA)
print("Klucz publiczny A: ", pubA)
print("Klucz prywatny B: ", privB)
print("Klucz publiczny B: ", pubB)

#Protokol
#Funkcja podnoszaca otrzymana wartosc do potegi rownej wartosci klucza:
#WE:
#priv - klucz prywatny
#key - klucz publiczny innego uzytkownika
#n - rzad podgrupy cyklicznej
#WYJ:
#(key^priv) % p - klucz publiczny podniesiony do klucza prywatnego
def step(p, key, priv):
    return (key^priv) % p
    
#Obliczone wartości g^ab/ac/bc
B_xx=step(p, pubA, privB)
A_xx=step(p, pubB, privA)

#K1, K2
print("\nK1: A otrzymuje wartosc g^b: ", pubB, ", nastepnie oblicza wartosc klucza sesyjnego g^ab: ", A_xx)
print("K2: B otrzymuje wartosc g^a: ", pubA, ", nastepnie oblicza wartosc klucz sesyjnego g^ab: ", B_xx)

#K3: sprawdzenie czy wspoldzielone wartosci sa identyczne
print("\nSprawdzenie czy wspoldzielone wartosci sa sobie rowne: ")
def check(x, y):
    if x==y:
        print("Wartosci sa identyczne")
    else:
        print("Wartosci sa rozne")
        
#Wywolanie sprawdzenia
check(A_xx, B_xx)