import hashlib
import binascii

#Wstep
#Parametry wejsciowe:
# n - ilosc iteracji

n=19
ptr=n

#Generowanie identyfikatorow:
#WE:
#n - ilosc iteracji
#y - wartosc poczatkowa
#WYJ:
#x[]
def genId(n, y):
    x=[]
    x.append(y)
    print("Uzytkownik wybral wartosc poczatkowa x0 = ", y)
    
    #generowanie iteracji przy pomocy funkcji skrotu
    d=hashlib.sha3_512()
    d.update(x[0].str().encode())
    hash=d.hexdigest()
    x.append(hash)

    for i in range(2,n+1):
        tmp=x[i-1]
        d=hashlib.sha3_512()
        d.update(tmp.encode())
        hash=d.hexdigest()
        x.append(hash)
    
    print("Wygenerowane hashe identyfikatorow:")
    for i in range(0, n+1):
        print("x[",i,"] = ", x[i])

    return x

x=[]
x=genId(n, 100)
        
#Kroki protokolu:
def protocol(k):
    #K1: uzytkownik przesyla xk
    print("\nK1: Uzytkownik przesyla identyfikator x_k: ", x[k])
    
    #K2: System sprawdza istnienie uzytkownika o danym identyfikatorze
    check=False
    print("K2: System sprawdza istnienie uzytkownika o identyfikatorze x_k")
    for i in x:
        if x[k]==i:
            check=True
            print("    Uzytkownik o identyfikatorze x_k istnieje")
            print("    Prosze podac haslo x_k-1")    
    
    if(check==False):
        print("    Uzytkownik o identyfikatorze x_k nie istnieje")
        exit()
        
    #Uzytkownik podaje haslo xk-1
    key=x[k-1]
    print("K3: Uzytkownik podaje wartosc x_k-1 = ", key)
    
    #Obliczenie wartosci weryfikacyjnej
    d=hashlib.sha3_512()
    if key==x[0]:
        d.update(key.str().encode())
    else:
        d.update(key.encode())
    hash=d.hexdigest()
    verify_v=hash
    print("K4: Obliczona wartosc weryfikacyjna: ", verify_v)
    
    #Sprawdzenie zgodnosci wartosci weryfikacyjnej z identyfikatorem
    print("K5: Sprawdzenie zgodnosci wartosci weryfikacyjnej z identyfikatorem")
    if(x[k]==verify_v):
        print("    Podane haslo jest prawidlowe, zmiana identyfikatora przy logowaniu")
    else:
        print("    Podane haslo jest bledne")
        exit()
        

for i in range(0, n):
    print("\nIteracja ", i)
    protocol(ptr)
    ptr=ptr-1
