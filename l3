#Parametry:
#q - liczba pierwsza
#m - parametr
#k - parametr
#n - parametr
#alfa - element pierwotny
#M - tajemnica do podzialu
q=random_prime(2^10-1, false, 2^(10-1))
m=10
n=17
k=8
#cialo Fq^m
G.<a>=GF(q**m)
alfa=G.primitive_element()

print("Parametry poczatkowe:")
print("q =",q)
print("m =",m)
print("n =",n)
print("k =",k)
print("alfa =",alfa)

#M - tajemnica, jako element ciała Fq^m
M=G.random_element()
print("M =", M)


#Generowanie cieni
def gen_shadows():
    a=[]
    #Zaufana strona wybiera elementy a1, a2, ..., ak-1 z ciała Fq^m
    for i in range (0, k-1):
        a.append(G.random_element())
    
    print("\nK1 - Zaufana strona: Wyznaczenie elementow a1, a2, ..., ak-1: ")
    for i in range (0, k-1):
        print("a[",i+1,"]:",a[i])

    #Zaufana strona wyznacza n cieni poprzez wymnozenie odpowiednich macierzy:
    #Wygenerowana macierz pomocnicza A
    A=zero_matrix(G,n,k)
    for i in range (0, A.nrows()):
        if i==A.nrows()-1:
            for j in range (0, A.ncols()):
                if(j==A.ncols()-1):
                    A[i,j]=1
                else:
                    A[i,j]=0
        else:
            for j in range (0, A.ncols()):
                A[i,j]=(alfa^(i+1))^j
            
    print("\nK2a - Zaufana strona: Macierz pomocnicza A:")
    print(A)
    
    #Macierz B o wymiarach k x 1 z wiadomoscia
    B=zero_matrix(G,k,1)
    for i in range (0, B.nrows()-1):
        B[i+1,0]=a[i]
 
    B[0,0]=M
    
    print("\nK2b - Zaufana strona: Macierz B z wiadomoscia:")
    print(B)

    #Wyznaczenie macierzy cieni przez zaufana strone
    C=zero_matrix(G,n,1)
    C=A*B
    print("\nK2c - Zaufana strona: Wyznaczona macierz cieni ktore zostana wyslane do uczestnikow: ")
    print (C)
    
    return C 
C=gen_shadows()


#Odtwarzanie tajemnicy
def reconstruct(C):
    #Uczestnicy i1, i2, ik wyznaczaja macierz D
    if k==n:
        D=zero_matrix(G,k,k)
        for i in range (0, D.nrows()):
            if i==D.nrows()-1:
                for j in range (0, D.ncols()):
                    if j==D.ncols()-1:
                        D[i,j]=1
                    else:
                        D[i,j]=0
            else:    
                for j in range (0, D.ncols()):
                    D[i,j]=(alfa^(i+1))^j
    else:
        D=zero_matrix(G,k,k)
        for i in range (0, D.nrows()):
            for j in range (0, D.ncols()):
                D[i,j]=(alfa^(i+1))^j
    
    print("\nK4 - Uczestnicy: uczestnicy i1, i2, ..., ik wyznaczyli macierz D: ")
    print(D)    

    #Odwrocenie macierzy D
    Dinv=D.inverse()
    print("\nK5a - Uczestnicy: Odwrocenie macierzy D:")
    print(Dinv)
    
    #Przepisanie do macierzy Ck k wierszy z macierzy C
    Ck=zero_matrix(G,k,1)
    for i in range (0, Ck.nrows()):
        Ck[i,0]=C[i,0]
    
    print("\nK5b - Uczestnicy: Macierz pomocnicza Ck:")
    print(Ck)

    #Wyznaczenie tajemnicy na podstawie k cieni
    Out=zero_matrix(G,k,1)
    Out=Dinv*Ck
    print("\nK5c - Uczestnicy: Wyznaczona macierz z tajemnica przez k cieni:")
    print(Out)
    return Out

secret=reconstruct(C)

#Sprawdzenie czy odzyskano wiadomosc
if secret[0, 0]==M:
    print("\nUdalo wyznaczyc sie wiadomosc")
else:
    print("\nNie udalo wyznaczyc sie wiadomosci")
